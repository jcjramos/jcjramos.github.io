<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on Ramos on Software</title>
    <link>https://jcjramos.github.io/categories/kubernetes/</link>
    <description>Recent content in Kubernetes on Ramos on Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Dec 2018 13:23:10 +0100</lastBuildDate>
    
	<atom:link href="https://jcjramos.github.io/categories/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About not-so-microservices</title>
      <link>https://jcjramos.github.io/posts/2018-12-17-not-so-microservices/</link>
      <pubDate>Mon, 17 Dec 2018 13:23:10 +0100</pubDate>
      
      <guid>https://jcjramos.github.io/posts/2018-12-17-not-so-microservices/</guid>
      <description>Sometimes, in particular when moving large legacy systems to a microservices architecture you came up with the dilemma, what to do about the not-so-microservices ? these are typically large monolith blocks from a bygone era. Developers are afraid of these, no one want’s to mess with them. But we live in a messy world with lot’s of IT infrastructure relying on old code – it is not possible to rewrite all the old code in a “container friendly” way.</description>
    </item>
    
  </channel>
</rss>