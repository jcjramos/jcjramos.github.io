<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on Ramos on Software</title>
    <link>https://jcjramos.github.io/tags/docker/</link>
    <description>Recent content in docker on Ramos on Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Jan 2020 13:23:10 +0100</lastBuildDate><atom:link href="https://jcjramos.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker in 6 minutes</title>
      <link>https://jcjramos.github.io/posts/2020-01-27-docker-in-6-minutes/</link>
      <pubDate>Mon, 27 Jan 2020 13:23:10 +0100</pubDate>
      
      <guid>https://jcjramos.github.io/posts/2020-01-27-docker-in-6-minutes/</guid>
      <description>Trying to make some sense of docker for non-technical people. Do you think it is more expensive to send a container full of goods from Lisbon to China or a plane ticket that allows one of you to go to from Lisbon to China? Actually it is roughly the same, the prices vary but on average the costs are around 1200 €.
It is surprising that it is relatively cheap to transport such a huge container full of goods.</description>
    </item>
    
    <item>
      <title>More About Helm - Tips</title>
      <link>https://jcjramos.github.io/posts/2019-01-21-more-about-helm-tips/</link>
      <pubDate>Mon, 21 Jan 2019 13:23:10 +0100</pubDate>
      
      <guid>https://jcjramos.github.io/posts/2019-01-21-more-about-helm-tips/</guid>
      <description>Helm is one of the best tools available to simplify your kubernetes development. In this post I’ll be adding some tips that might help you in the development of your helm charts.
Btw, you migth like to see this previous post and eventually [this one] (../2019-01-04-more-about-helm-values/)
Tip 1 – Files in configmaps There are cases where you will need to move existing configuration files to config maps, a hard working solution is to just type in the whole file with the proper config map indentation.</description>
    </item>
    
    <item>
      <title>The logging triology - ELK Elasticsearch &#43; Logstash &#43; Kibana</title>
      <link>https://jcjramos.github.io/posts/2019-01-08-the-log-triollogy/</link>
      <pubDate>Tue, 08 Jan 2019 13:23:10 +0100</pubDate>
      
      <guid>https://jcjramos.github.io/posts/2019-01-08-the-log-triollogy/</guid>
      <description>One of the side effects of a microservices architecture is that checking logs soon becomes a problem. At the beginning of the process, when you think about containerizing an application, it seems simple and straightforward – you just log to stdout and docker or kubernetes handle it. But then &amp;hellip;
Where is my log ? The number of different services &amp;amp; service instances rapidly explodes and then it becomes really difficult to find a particular log and to troubleshoot the misbehaviour of a micro-service.</description>
    </item>
    
    <item>
      <title>More About Helm - Values</title>
      <link>https://jcjramos.github.io/posts/2019-01-04-more-about-helm-values/</link>
      <pubDate>Fri, 04 Jan 2019 13:23:10 +0100</pubDate>
      
      <guid>https://jcjramos.github.io/posts/2019-01-04-more-about-helm-values/</guid>
      <description>Manage deployments is a import concern when creating a microservices based application, given the typical huge number of services involved and the possible variations you need a way to keep complexity under control. Helm can be a usefull tool, besides been a very cool way to define dependencies ( see this previous post ), Helm introduces an interesting concept called values ( not quite original, but implemented in a nice way ).</description>
    </item>
    
    <item>
      <title>About Helm</title>
      <link>https://jcjramos.github.io/posts/2018-12-19-about-helm/</link>
      <pubDate>Wed, 19 Dec 2018 13:23:10 +0100</pubDate>
      
      <guid>https://jcjramos.github.io/posts/2018-12-19-about-helm/</guid>
      <description>Microservices are supposed to be small and dedicated, the issue when you move an application to a microservices based architecture is that you quickly get many of them. Dealing with each service individually becomes much easier as they get more “micro”, but deal with the whole bunch can be a nightmare. Look at the example bellow, in the 1st interaction of a typical application it became something like this :</description>
    </item>
    
    <item>
      <title>About not-so-microservices</title>
      <link>https://jcjramos.github.io/posts/2018-12-17-not-so-microservices/</link>
      <pubDate>Mon, 17 Dec 2018 13:23:10 +0100</pubDate>
      
      <guid>https://jcjramos.github.io/posts/2018-12-17-not-so-microservices/</guid>
      <description>Sometimes, in particular when moving large legacy systems to a microservices architecture you came up with the dilemma, what to do about the not-so-microservices ? these are typically large monolith blocks from a bygone era. Developers are afraid of these, no one want’s to mess with them. But we live in a messy world with lot’s of IT infrastructure relying on old code – it is not possible to rewrite all the old code in a “container friendly” way.</description>
    </item>
    
    <item>
      <title>The Ingress triology</title>
      <link>https://jcjramos.github.io/posts/2018-12-14-expose-kubernertes-services/</link>
      <pubDate>Fri, 14 Dec 2018 13:23:10 +0100</pubDate>
      
      <guid>https://jcjramos.github.io/posts/2018-12-14-expose-kubernertes-services/</guid>
      <description>Deploying http services in a Kubernetes cluster can be a bit challenging, although the basic principles are simple it is not always easy to manage all the details. Docker &amp;amp; Kubernetes were designed with isolation in mind ( they are called containers for a reason ). You need to understand the Ingress triology properlly : Ingress -&amp;gt; Service -&amp;gt; Containers.
The Container The fist step is to have the container running, inside the container there is a service running that accepts HTTP connections – let’s say tomcat running a webserver.</description>
    </item>
    
  </channel>
</rss>
