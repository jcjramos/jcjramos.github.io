<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software on Ramos on Software</title>
    <link>https://jcjramos.github.io/tags/software/</link>
    <description>Recent content in Software on Ramos on Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Feb 2019 13:23:10 +0100</lastBuildDate>
    
	<atom:link href="https://jcjramos.github.io/tags/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dependency Hell v2019 </title>
      <link>https://jcjramos.github.io/posts/2019-02-04-dependency-hell-v2019/</link>
      <pubDate>Mon, 04 Feb 2019 13:23:10 +0100</pubDate>
      
      <guid>https://jcjramos.github.io/posts/2019-02-04-dependency-hell-v2019/</guid>
      <description>A recent problem that one of the teams I work with faced, related to a major DB vendor and a set of different incompatible patches remind me of the 90’s. During the late 90’s I’ve worked for a Windows shop that developed a huge DLL based application, taking care of dependencies was a nightmare…early MS win 95 versions didn’t include any good mechanism to track DLL versions, also initially this was not a major concern when developing our application, but we end up creating a lot of DLLs and with additional dependencies from SO and 3rd party DLL’s, so I know fist hand what “DLL hell” means.</description>
    </item>
    
  </channel>
</rss>